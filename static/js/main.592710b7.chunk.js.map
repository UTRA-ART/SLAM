{"version":3,"sources":["res/slam_ico.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","show","setShow","handleClose","style","width","height","background","Navbar","bg","expand","Brand","href","src","test","Toggle","aria-controls","Collapse","id","Nav","className","Link","Button","borderColor","backgroundColor","variant","onClick","Jumbotron","borderRadius","backgroundPosition","backgroundImage","maxWidth","color","fontSize","marginTop","textAlign","title","Row","margin","Col","xs","padding","Carousel","Item","Caption","Modal","onHide","Header","closeButton","Title","Body","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.592710b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slam_ico.9e5f8c16.svg\";","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Carousel from 'react-bootstrap/Carousel'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Modal from 'react-bootstrap/Modal'\n\nimport test from './res/slam_ico.svg'\n\n\nfunction App() {\n  \n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return <div style = {{width: 'auto', height: '100%', background: '#202020'}}>\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\"><img src = {test} style = {{width: 40}}/></Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">About</Nav.Link>\n          <Nav.Link href=\"#tut\">Tutorials</Nav.Link>\n          <Nav.Link href=\"#doc\">Documentation</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n      <Button style = {{borderColor: `white`, backgroundColor: `rgba(0, 0, 0, 0.4)`}} variant=\"primary\" onClick = {handleShow}>Join us</Button>\n    </Navbar>\n\n    <Jumbotron\n      style = {\n        {\n          borderRadius: 0,\n          backgroundPosition: '0% 2%',\n          backgroundImage: 'url(https://upload.wikimedia.org/wikipedia/commons/b/bd/Ouster_OS1-64_lidar_point_cloud_of_intersection_of_Folsom_and_Dore_St%2C_San_Francisco.png)',\n          maxWidth: '100%',\n          height: '350px',\n        }\n      }\n    > \n      <h1 style = {{color: `white`}}>What is SLAM and Navigation?</h1>\n      <p style = {{color: `white`, fontSize: '18px'}}>\n        <b>Simultaneous localization and mapping</b> and <b>navigation</b> refer to two independant but related processes:\n        <ul>\n         <li>constructing a map while keeping track of your location within it</li>\n          <li>finding an optimal path between your current location and a destination on that map</li>\n       </ul>\n      </p>\n       <p>\n        <Button style = {{marginTop: '20px', borderColor: `white`, backgroundColor: `rgba(0, 0, 0, 0.4)`}} variant=\"primary\">Learn more</Button>\n      </p>\n      <p style = {{textAlign: `right`}}>\n        <a style = {{color: `white`}} href=\"https://commons.wikimedia.org/wiki/File:Ouster_OS1-64_lidar_point_cloud_of_intersection_of_Folsom_and_Dore_St,_San_Francisco.png\" title=\"via Wikimedia Commons\">Daniel L. Lu</a> <a style = {{color: `white`}} href=\"https://creativecommons.org/licenses/by/4.0\">[CC BY 4.0]</a>\n      </p>\n    </Jumbotron>\n    \n      <Row style = {{width: '100%', margin: '0 0 0 0'}}>\n        <Col xs = {3} style = {{margin: '0 0 0 0', padding: '0 0 0 0'}}>\n\n          <Jumbotron\n            style = {\n              {\n                borderRadius: '0 10 0 10',\n                backgroundPosition: '0% 2%',\n                background: 'black',\n                maxWidth: '90%',\n                height: '400px',\n              }\n            }\n          > \n            <p style = {{color: `white`, fontSize: '18px'}}>Featured Project</p>\n            <h1 style = {{color: `white`}}>Caffeine</h1>\n            <p style = {{color: `white`, fontSize: '18px'}}>\n              We are currently working on a robot, called Caffeine, for the 2020 IGVC competition.\n            </p>\n            <p>\n              <Button href = \"https://github.com/UTRA-ART/SLAM\" style = {{marginTop: '20px', borderColor: `white`, backgroundColor: `rgba(0, 0, 0, 0.4)`}} variant=\"primary\">GitHub Repository</Button>\n            </p>\n          </Jumbotron>\n\n        </Col>\n\n        <Col style = {{margin: '0 0 0 0', padding: '0 0 0 0'}}>\n\n          <Carousel style = {{borderRadius: '10 0 10 0'}}>\n            <Carousel.Item>\n              <div style = {{background: 'black', width: '100%', height: '400px'}}></div>\n              <Carousel.Caption>\n                <h3>Meet the Members</h3>\n                <p>The SLAM and Navigation division of the Autonomous Rover Team is a small but dedicated group of students working towards creating fully autonomous robots.</p>\n                \n              </Carousel.Caption>\n            </Carousel.Item>\n          </Carousel>\n\n        </Col>\n      </Row>\n\n    <Navbar style = {{background: \"#202020\"}} expand=\"lg\">\n      <Navbar.Brand href=\"#home\"><img src = \"\" style = {{width: 40}}/></Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          \n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n    \n    <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Join us</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Thank you for your interest in joining our team. We are still working on this functionality, so for now, please send us an email!</Modal.Body>\n        <Modal.Footer>\n        <Button style = {{marginTop: '20px', borderColor: `white`, backgroundColor: `rgba(0, 0, 0, 0.4)`}} variant=\"primary\" onClick={handleClose}>Close</Button>\n        </Modal.Footer>\n      </Modal>\n  </div>\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}