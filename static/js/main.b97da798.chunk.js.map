{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Navbar","bg","expand","Brand","href","src","style","width","Toggle","aria-controls","Collapse","id","Nav","className","Link","Jumbotron","borderRadius","backgroundPosition","backgroundImage","maxWidth","height","color","fontSize","Button","marginTop","borderColor","backgroundColor","variant","textAlign","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAiDeA,EA1CH,kBACV,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAQ,yBAAKC,IAAM,GAAGC,MAAS,CAACC,MAAO,OAC1D,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,qBAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUV,KAAK,SAAf,SACA,kBAACQ,EAAA,EAAIE,KAAL,CAAUV,KAAK,QAAf,aACA,kBAACQ,EAAA,EAAIE,KAAL,CAAUV,KAAK,QAAf,oBAIN,kBAACW,EAAA,EAAD,CAAWT,MACP,CACEU,aAAc,EACdC,mBAAoB,QACpBC,gBAAiB,sJACjBC,SAAU,OACVC,OAAQ,UAIhB,wBAAId,MAAS,CAACe,MAAM,UAApB,gCACA,uBAAGf,MAAS,CAACe,MAAM,QAAUC,SAAU,SACrC,oEADF,QACmD,yCADnD,mDAEE,4BACE,iGACA,qHAGJ,2BACE,kBAACC,EAAA,EAAD,CAAQjB,MAAS,CAACkB,UAAW,OAAQC,YAAY,QAAUC,gBAAgB,sBAAwBC,QAAQ,WAA3G,eAEF,uBAAGrB,MAAS,CAACsB,UAAU,UACvB,uBAAGtB,MAAS,CAACe,MAAM,SAAWjB,KAAK,mIAAmIyB,MAAM,yBAA5K,gBADA,IACqN,uBAAGvB,MAAS,CAACe,MAAM,SAAWjB,KAAK,+CAAnC,mBC9BnM0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b97da798.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Jumbotron from 'react-bootstrap/Jumbotron'\n\nconst App = () => (\n  <div>\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\"><img src = \"\" style = {{width: 40}}/></Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">About</Nav.Link>\n          <Nav.Link href=\"#tut\">Tutorials</Nav.Link>\n          <Nav.Link href=\"#doc\">Documentation</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n    <Jumbotron style = {\n        {\n          borderRadius: 0,\n          backgroundPosition: '0% 2%',\n          backgroundImage: 'url(https://upload.wikimedia.org/wikipedia/commons/b/bd/Ouster_OS1-64_lidar_point_cloud_of_intersection_of_Folsom_and_Dore_St%2C_San_Francisco.png)',\n          maxWidth: '100%',\n          height: '350px',\n        }\n      }\n    > \n  <h1 style = {{color: `white`}}>What is SLAM and Navigation?</h1>\n  <p style = {{color: `white`, fontSize: '18px'}}>\n    <b>Simultaneous localization and mapping</b> and <b>navigation</b> refer to two independant but related processes:\n    <ul>\n      <li>constructing a map while keeping track of your location within it</li>\n      <li>finding an optimal path between your current location and a destination on that map</li>\n    </ul>\n  </p>\n  <p>\n    <Button style = {{marginTop: '20px', borderColor: `white`, backgroundColor: `rgba(0, 0, 0, 0.4)`}} variant=\"primary\">Learn more</Button>\n  </p>\n  <p style = {{textAlign: `right`}}>\n  <a style = {{color: `white`}} href=\"https://commons.wikimedia.org/wiki/File:Ouster_OS1-64_lidar_point_cloud_of_intersection_of_Folsom_and_Dore_St,_San_Francisco.png\" title=\"via Wikimedia Commons\">Daniel L. Lu</a> <a style = {{color: `white`}} href=\"https://creativecommons.org/licenses/by/4.0\">[CC BY 4.0]</a>\n  </p>\n</Jumbotron>\n  </div>\n\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}